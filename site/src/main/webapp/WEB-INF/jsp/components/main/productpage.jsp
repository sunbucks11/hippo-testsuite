<%--
  Copyright 2008-2009 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. --%>

<%@ page language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/xml" prefix="x" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib uri="http://www.hippoecm.org/jsp/hst/core" prefix='hst'%>

<hst:defineObjects/>

<hst:headContribution keyHint="title"><title><c:out value="${document.title}" /></title></hst:headContribution>
<hst:element name="script" var="yui3Elem">
  <hst:attribute name="type" value="text/javascript" />
  <hst:attribute name="src" value="http://yui.yahooapis.com/3.2.0/build/yui/yui-min.js" />
</hst:element>
<hst:headContribution keyHint="yui3" element="${yui3Elem}" />

<div id="<hst:namespace/>detailPane" class="yui-u">
<form name="theForm">
  <h2><c:out value="${document.title}" /></h2>
  <p>
    <c:out value="${document.summary}" />
  </p>
  
  <p>
    Brand : 
    <c:out value="${document.brand}" />
    (
    View via 
    <a href='<hst:link path="/products/brand/${document.brand}/" mount="restservices"/>' target='_blank'
       title='Click to view this product in XML generated by a Plain JAX-RS Service.'>Plain REST</a>
    or
    <a href='<hst:link hippobean="${document}" mount="restapi"/>' target='_blank'
       title='Click to view this product in XML generated by a Context/Content-Aware JAX-RS Service.'>Context-Aware REST</a>
    )
  </p>
  <p>
    Product : 
    <c:choose>
      <c:when test="${isPreview and not empty(hstRequest.userPrincipal)}">
        <input type='text' size='8' id='<hst:namespace/>product' value='<c:out value="${document.product}" />' />
      </c:when>
      <c:otherwise>
        <c:out value="${document.product}" />
      </c:otherwise>
    </c:choose>
    
    (
    <a href='<hst:link path="/products/search/" mount="restservices"><hst:param name="product" value="${document.product}"/></hst:link>' target='_blank'
       title='Click to search all products of the same product type in XML generated by a Plain JAX-RS Service.'>Search all products of the same product type</a>
    )
  </p>
  <p>
    Type : 
    <c:choose>
      <c:when test="${isPreview and not empty(hstRequest.userPrincipal)}">
        <input type='text' size='8' id='<hst:namespace/>type' value='<c:out value="${document.type}" />' />
      </c:when>
      <c:otherwise>
        <c:out value="${document.type}" />
      </c:otherwise>
    </c:choose>
  </p>
  <p>
    Color : 
    <c:choose>
      <c:when test="${isPreview and not empty(hstRequest.userPrincipal)}">
        <input type='text' size='8' id='<hst:namespace/>color' value='<c:out value="${document.color}" />' />
      </c:when>
      <c:otherwise>
        <c:out value="${document.color}" />
      </c:otherwise>
    </c:choose>
  </p>
  <p>
    Price : 
    <c:choose>
      <c:when test="${isPreview and not empty(hstRequest.userPrincipal)}">
        <input type='text' size='8' id='<hst:namespace/>price' value='<c:out value="${document.price}" />' />
      </c:when>
      <c:otherwise>
        <c:out value="${document.price}" />
      </c:otherwise>
    </c:choose>
  </p>
  <p>
    Tags : 
    <c:choose>
      <c:when test="${isPreview and not empty(hstRequest.userPrincipal)}">
        <input id="<hst:namespace/>tags" 
               type="text" size="8"
               title="Please enter comma separated tags here." 
               value="${fn:escapeXml(fn:join(document.tags, ', '))}"/>
      </c:when>
      <c:otherwise>
        <span id="<hst:namespace/>tags">${fn:escapeXml(fn:join(document.tags, ', '))}</span>
      </c:otherwise>
    </c:choose>
  </p>
</form>

  <p>
    Image:
    <br/>
    <c:if test="${not empty document.image}">
      <a href="<hst:link hippobean="${document.image.original}"><hst:param name="t" value="<%=Long.toString(System.currentTimeMillis())%>"/></hst:link>" target="_blank">
        <img id="productImg" src="<hst:link hippobean="${document.image.thumbnail}"><hst:param name="t" value="<%=Long.toString(System.currentTimeMillis())%>"/></hst:link>" border="0"/>
      </a>
    </c:if>
    <br/>
    <c:if test="${isPreview and empty(hstRequest.userPrincipal)}">
      <span><em>(Authentication required to upload image.)</em></span>
    </c:if>
    <form id="uploadForm" method="POST" enctype="multipart/form-data">
      <input type="file" id="<hst:namespace/>uploadFile" name="file" style="DISPLAY: none" />
      <input type="button" id="<hst:namespace/>uploadButton" value="Upload" style="DISPLAY: none" />
    </form>
  </p>
</div>

<c:choose>
  <c:when test="${isPreview}">
    <p>
      <a href="<hst:link hippobean="${document}" mountType="live"/>">View in Live</a>
    </p>
    <p>
      <a href="#" id="<hst:namespace/>updateViaContent" title='Click to update this product document by a Context/Content-Aware JAX-RS Service.'>Update via Content-Aware REST</a>
      |
      <a href="#" id="<hst:namespace/>updateViaPlain" title='Click to update this product document by a Plain JAX-RS Service.'>Update via Plain REST</a>
    </p>
    <p>
      <a href="#" id="<hst:namespace/>deleteViaContent" href="#" title='Click to remove this product document by a Context/Content-Aware JAX-RS Service.'>Delete via Content-Aware REST</a>
      |
      <a href="#" id="<hst:namespace/>deleteViaPlain" href="#" title='Click to remove this product document by a Plain JAX-RS Service.'>Delete via Plain REST</a>
    </p>
  </c:when>
  <c:otherwise>
    <p>
      <a href="<hst:link hippobean="${document}" mountType="preview"/>">Edit in Preview</a>
    </p>
  </c:otherwise>
</c:choose>

<script language="javascript"> 
 
YUI().use('io-upload-iframe', 'json', 'node',
function(Y) {

  var updateViaContentLink = Y.one("#<hst:namespace/>updateViaContent");
  var updateViaPlainLink = Y.one("#<hst:namespace/>updateViaPlain");
  var deleteViaContentLink = Y.one("#<hst:namespace/>deleteViaContent");
  var deleteViaPlainLink = Y.one("#<hst:namespace/>deleteViaPlain");
  
  var uploadForm = Y.one("#uploadForm");
  var uploadFile = Y.one("#<hst:namespace/>uploadFile");
  var uploadButton = Y.one("#<hst:namespace/>uploadButton");
  
  var onUpdateComplete = function(id, o, args) {
    if (o.status > 400) {
      alert("You are not authorized to edit the tags.");
      return;
    }
     
    var id = id;
    var data = o.responseText;
    var dataOut = null;

    try {
      dataOut = Y.JSON.parse(data);
      if (!dataOut) {
        Y.log("Error: no data found.");
        return;
      }

      Y.one("#<hst:namespace/>color").set("value", "");
      Y.one("#<hst:namespace/>product").set("value", "");
      Y.one("#<hst:namespace/>type").set("value", "");
      Y.one("#<hst:namespace/>price").set("value", "");
      Y.one("#<hst:namespace/>tags").set("value", "");
      
      Y.one("#<hst:namespace/>color").set("value", dataOut["color"]);
      Y.one("#<hst:namespace/>product").set("value", dataOut["product"]);
      Y.one("#<hst:namespace/>type").set("value", dataOut["type"]);
      Y.one("#<hst:namespace/>price").set("value", dataOut["price"]);
      Y.one("#<hst:namespace/>tags").set("value", dataOut["tags"].join(", "));

      alert("Update completed.");
    } catch (e) {
      Y.log("Error: " + e.message);
      return;
    }
  };
  
  var updateVia = function(uri) {
    var data = {};

    data["color"] = Y.one("#<hst:namespace/>color").get("value");
    data["product"] = Y.one("#<hst:namespace/>product").get("value");
    data["type"] = Y.one("#<hst:namespace/>type").get("value");
    data["price"] = Y.one("#<hst:namespace/>price").get("value");

    var tags = Y.one("#<hst:namespace/>tags").get("value").replace(/^\s+/, "").replace(/\s+$/, "").split(/,/);
    for (var i = 0; i < tags.length; i++) {
      tags[i] = tags[i].replace(/^\s+/, "").replace(/\s+$/, "");
    }
    data["tags"] = tags;

    var cfg = { 
          on: { complete: onUpdateComplete },
          arguments: {},
          method: "PUT",
          headers: { 
              "Accept": "application/json, text/javascript, text/html, application/xhtml+xml, application/xml, text/xml", 
              "Content-Type": "application/json" 
                  },
          data: Y.JSON.stringify(data)
    };
    var request = Y.io(uri, cfg);
  };

  var updateViaContent = function(e) {
	updateVia('<hst:link path="${hstRequest.requestContext.resolvedSiteMapItem.pathInfo}" mount="restapi"><hst:param name="_type" value="json"/></hst:link>');
	e.halt();
  };
  
  var updateViaPlain = function(e) {
    updateVia('<hst:link path="/products/brand/${document.brand}/" mount="restservices"><hst:param name="_type" value="json"/></hst:link>');
    e.halt();
  };
  
  var refreshProductImage = function() {
    var productImg = Y.one("#productImg");
	if (productImg) {
	  var src = "" + productImg.get("src");
      if (src.indexOf('?') != -1) {
        src = src.substring(0, src.indexOf('?'));
      }
      src += "?t=" + new Date().getTime();
      productImg.set("src", src);
	}
  };
  
  var onUploadImageComplete = function(id, o, args) {
    refreshProductImage();
  };
  
  var uploadImageForm = function(e) {
    var cfg = {
          on: { complete: onUploadImageComplete },
          arguments: {},
          method: 'POST',
		  form: {
		    id: uploadForm,
		    upload: true
          }
    };
    
    var uri = '<hst:link hippobean="${document.image}" mount="restapi-gallery" subPath="original/content" />';
    var request = Y.io(uri, cfg);

    e.halt();
  };

  var onDeleteViaComplete = function(id, o, args) {
    if (o.status >= 400) {
      alert("You are not authorized to edit the tags.");
      return;
    } else if (o.status == 200) {
      alert("The product content has been removed.");
      return;
    }
  };

  var deleteVia = function(uri) {
    if (!confirm("Are you sure to remove this product document?\nYou will get 404 error from the GET this resource.")) {
      return;
    }
    var cfg = {
          on: { complete: onDeleteViaComplete },
          arguments: {},
          method: 'DELETE'
    };
    
    var request = Y.io(uri, cfg);
  };
  
  var deleteViaContent = function(e) {
    deleteVia('<hst:link hippobean="${document}" mount="restapi"/>');
    e.halt();
  };
  
  var deleteViaPlain = function(e) {
    deleteVia('<hst:link path="/products/brand/${document.brand}/" mount="restservices"/>');
    e.halt();
  };
  
<c:if test="${isPreview and not(empty(hstRequest.userPrincipal))}">
  uploadFile.setStyle("display", "");
  uploadButton.setStyle("display", "");
</c:if>
  
  uploadButton.on("click", uploadImageForm);

  if (updateViaContentLink) {
	updateViaContentLink.on("click", updateViaContent);
  }
  if (updateViaPlainLink) {
	updateViaPlainLink.on("click", updateViaPlain);
  }
  if (deleteViaContentLink) {
	deleteViaContentLink.on("click", deleteViaContent);
  }
  if (deleteViaPlainLink) {
    deleteViaPlainLink.on("click", deleteViaPlain);
  }
});

</script>
